// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	pkg "ent-golang-task/pkg"

	mock "github.com/stretchr/testify/mock"
)

// UserTransactionRepository is an autogenerated mock type for the UserTransactionRepository type
type UserTransactionRepository struct {
	mock.Mock
}

// AddTransaction provides a mock function with given fields: ctx, userTransaction
func (_m *UserTransactionRepository) AddTransaction(ctx context.Context, userTransaction pkg.UserTransaction) error {
	ret := _m.Called(ctx, userTransaction)

	if len(ret) == 0 {
		panic("no return value specified for AddTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pkg.UserTransaction) error); ok {
		r0 = rf(ctx, userTransaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTransactionsByUserId provides a mock function with given fields: ctx, userId
func (_m *UserTransactionRepository) GetAllTransactionsByUserId(ctx context.Context, userId uint64) ([]pkg.UserTransaction, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTransactionsByUserId")
	}

	var r0 []pkg.UserTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]pkg.UserTransaction, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []pkg.UserTransaction); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pkg.UserTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsExistingUserTransaction provides a mock function with given fields: ctx, transactionId
func (_m *UserTransactionRepository) IsExistingUserTransaction(ctx context.Context, transactionId string) (bool, error) {
	ret := _m.Called(ctx, transactionId)

	if len(ret) == 0 {
		panic("no return value specified for IsExistingUserTransaction")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, transactionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, transactionId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transactionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserTransactionRepository creates a new instance of UserTransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserTransactionRepository {
	mock := &UserTransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
